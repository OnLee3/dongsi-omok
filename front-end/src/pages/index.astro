---
import { BOARD_SIZE, ALPHABETS } from '@dongsi-omok/shared';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <div class="board">
      {
        Array.from({ length: BOARD_SIZE }, (_, i) => i).map((row) =>
          ALPHABETS.slice(0, BOARD_SIZE).map((column) => (
            <button
              data-row={row}
              data-col={column}
              aria-label={`row:${row + 1} col:${column}`}
            />
          )),
        )
      }
    </div>
  </body>
  <style define:vars={{ boardSize: BOARD_SIZE }}>
    .board {
      width: 500px;
      height: 500px;
      display: grid;
      grid-template-columns: repeat(var(--boardSize), 1fr);
      grid-template-rows: repeat(var(--boardSize), 1fr);
      background-color: burlywood;
    }
    button {
      background-color: transparent;
      border: none;
      position: relative;
      &:not(:disabled) {
        cursor: pointer;
      }

      &.plan {
        background-color: blue;
        border-radius: 50%;
      }

      &.prohibit {
        background-color: red;
        border-radius: 50%;
      }

      &.stone {
        border-radius: 50%;
        &.white {
          background-color: white;
          &::before,
          &::after {
            z-index: -1;
          }
        }
        &.black {
          background-color: black;
        }
      }

      &:hover:not(:disabled) {
        background-color: hsl(30, 50%, 80%);
      }

      &:active:not(:disabled) {
        background-color: hsl(30, 50%, 88%);
      }

      &::before,
      &::after {
        content: '';
        position: absolute;
        background-color: black;
      }
      &::before {
        width: 1px;
        height: 100%;
        top: 0;
      }
      &::after {
        height: 1px;
        width: 100%;
        left: 0;
      }
      &[data-row='0'] {
        &::before {
          top: 50%;
          height: 50%;
        }
      }
      &[data-row='18'] {
        &::before {
          height: 50%;
        }
      }
      &[data-col='A'] {
        &::after {
          left: 50%;
          width: 50%;
        }
      }
      &[data-col='S'] {
        &::after {
          width: 50%;
        }
      }
      &:last-child::before {
        height: 54%;
      }
    }
  </style>
  <script>
    import {
      BOARD_SIZE,
      type Board,
      ALPHABETS,
      type BoardItem,
      type Player,
      makeClientCommand,
      isValidServerCommand,
      type ServerCommand,
      type ServerCommandType,
    } from '@dongsi-omok/shared';
    import { check_is_win } from '../utils';
    import { match } from 'ts-pattern';
    const board: Board = Array.from({ length: BOARD_SIZE }, (_) =>
      Array.from({ length: BOARD_SIZE }, (__) => null),
    );
    let player: Player | null = null;

    document.querySelector('.board')?.addEventListener('click', (e) => {
      const button = e.target as HTMLButtonElement;
      const {
        dataset: { row, col },
      } = button;
      if (!row || !col) {
        return;
      }
      if (player === null) {
        return;
      }
      socket.send(
        JSON.stringify(
          makeClientCommand('PLACE_ITEM', {
            player,
            payload: { item: player, row, col },
          }),
        ),
      );
      place_a_item(button, 'plan');
      board[Number(row)][ALPHABETS.findIndex((alphabet) => alphabet === col)] =
        'plan';
    });

    const place_a_item = (button: HTMLButtonElement, item: BoardItem) => {
      button.classList.add('stone');
      button.classList.add(item);
      button.setAttribute('disabled', 'true');
    };

    const handleServerCommand = (command: ServerCommand) => {
      match(command)
        .with(
          { id: 'PLACE_ITEM' },
          (command: ServerCommandType<'PLACE_ITEM'>) => {
            if (command.payload.length === 1) {
              const {
                payload: [{ item, row, col }],
              } = command;
              place_a_item(
                document.querySelector(
                  `[data-row="${row}"][data-col="${col}"]`,
                )!,
                item,
              );
              board[Number(row)][
                ALPHABETS.findIndex((alphabet) => alphabet === col)
              ] = item;
            } else {
              const {
                payload: [
                  { item: item1, row: row1, col: col1 },
                  { item: item2, row: row2, col: col2 },
                ],
              } = command;
              place_a_item(
                document.querySelector(
                  `[data-row="${row1}"][data-col="${col1}"]`,
                )!,
                item1,
              );
              board[Number(row1)][
                ALPHABETS.findIndex((alphabet) => alphabet === col1)
              ] = item1;

              place_a_item(
                document.querySelector(
                  `[data-row="${row2}"][data-col="${col2}"]`,
                )!,
                item2,
              );
              board[Number(row2)][
                ALPHABETS.findIndex((alphabet) => alphabet === col2)
              ] = item2;

              if (
                check_is_win(
                  board,
                  Number(row1),
                  ALPHABETS.findIndex((alphabet) => alphabet === col1),
                )
              ) {
                alert(`${item1} win!`);
              }
              if (
                check_is_win(
                  board,
                  Number(row2),
                  ALPHABETS.findIndex((alphabet) => alphabet === col2),
                )
              ) {
                alert(`${item2} win!`);
              }
            }
          },
        )
        .with(
          { id: 'SET_PLAYER_COLOR' },
          (command: ServerCommandType<'SET_PLAYER_COLOR'>) => {
            player = command.payload.color;
            console.log(`you are ${player}`);
          },
        )
        .exhaustive();
    };

    /** 웹소켓 */
    const socket = new WebSocket('ws://localhost:8080');
    socket.onopen = (e) => {
      console.log(e);
    };
    socket.onmessage = (event) => {
      try {
        const parsedMessage = JSON.parse(event.data.toString());
        console.log(parsedMessage);
        if (isValidServerCommand(parsedMessage)) {
          handleServerCommand(parsedMessage);
        }
      } catch (err) {
        console.error('Failed to parse message', err);
      }
    };
  </script>
</html>
